apply plugin: 'java'
apply plugin: 'eclipse'

//Grade attributes
group 'fr.triedge'
version '0.1'

task wrapper(type: Wrapper) {
    gradleVersion = "3.0";
}

sourceSets {
    main {
        java {
            srcDirs = ['/']
            exclude 'test/**'
        }
    }
}

repositories {
    flatDir {
       dirs 'lib'
   }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
	extraLibs fileTree(dir: 'lib', include: '*.jar')
	configurations.compile.extendsFrom(configurations.extraLibs)
}

task releaseClient(type: Jar){
	dependsOn compileJava
	manifest {
    	attributes 'Main-Class': 'src.fr.triedge.sekai.client.run.RunClient'
    	attributes 'Class-Path': 'libs/log4j.jar libs/litiengine-0.4.13.jar'
    }
    baseName='SekaiClient'
    destinationDir = file("$rootDir/build/Client")
    from sourceSets.main.output.classesDir
    include 'src\\fr\\triedge\\sekai\\client\\**'
    include 'src\\fr\\triedge\\sekai\\common\\**'
    
    copy {
		from 'lib'
		into 'build/Client/libs'
	}
	copy{
		from 'client'
		into 'build/Client/client'
	}
	
    //from configurations.extraLibs.collect { zipTree(it) }
} 

task releaseServer(type: Jar){
	dependsOn compileJava
	manifest {
    	attributes 'Main-Class': 'src.fr.triedge.sekai.server.run.RunServer'
    	attributes 'Class-Path': 'libs/db4o-8.0.jar libs/log4j.jar libs/mysql-connector-java-8.0.13.jar'
    	//attributes 'Class-Path': configurations.extraLibs.collect { it.getName() }.join(' ')
    }
	baseName='SekaiServer'
	destinationDir = file("$rootDir/build/Server")
	from sourceSets.main.output.classesDir
    include 'src\\fr\\triedge\\sekai\\server\\**'
	include 'src\\fr\\triedge\\sekai\\common\\**'
	
	copy {
		from 'lib'
		into 'build/Server/libs'
	}
	copy{
		from 'server'
		into 'build/Server/server'
	}
    //from configurations.extraLibs.collect { zipTree(it) }
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

//task listJars {
//    configurations.extraLibs.each { File file -> println file.name }
//}

task releaseALL(type: Jar){
	dependsOn releaseClient
	dependsOn releaseServer
}